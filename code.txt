//for sensor X
`define TRUE 1'b1
`define FALSE 1'b0
//Delays
`define Y2RDELAY 3 //Yellow to red delay
`define R2GDELAY 2 //Red to Green Delay
module sa(hwy, cntry, X, clock, clear);
//I/0 ports
output [1:0] hwy,cntry;
//2 bit output for 3 states of signal
//GREEN, YELLOW, RED;
reg [1:0] hwy,cntry;
input X; //sensor
input clock, clear;
//Status of lights
parameter
RED =2'd0,
YELLOW = 2'd1,
GREEN = 2'd2;
//State definition
parameter S0 = 3'd0,
S1= 3'd1,
S2= 3'd2,
S3= 3'd3,
S4= 3'd4;
//Internal state variables
reg [2:0] state;
reg [2:0] next_state;
always @(posedge clock)
if (clear)
state <= S0;
else
state <= next_state;
//Compute values of main signal and country signal
always @(state)
begin
hwy = GREEN; //Default light assignment
cntry= RED; //Default light assignment
case (state)
S0:;
S1:hwy= YELLOW;
S2:hwy= RED;
S3:begin
hwy= RED;
cntry=GREEN;
end
S4:begin
hwy= RED;
cntry=GREEN;
end
endcase
end
//State machine using case statements
always @(state or X)
begin
case (state)
S0: if (X)
next_state=S1;
else
next_state = S0;
S1: begin //delay some positive edges of clock
repeat (`Y2RDELAY) next_state=S1;
next_state =S2;
end
S2: begin //delay some positive edges of clock
repeat (`R2GDELAY) next_state=S2;
next_state=S3;
end
S3:if(X)
next_state =S3;
else
next_state =S4;
S4: begin //delay some positive edges of clock
repeat (`Y2RDELAY) next_state=S4;
next_state=S0;
end
default: next_state =S0;
endcase
end
endmodule